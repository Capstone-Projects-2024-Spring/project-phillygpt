"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-phillygpt/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-phillygpt/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-phillygpt/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-phillygpt/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-phillygpt/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use Cases","href":"/project-phillygpt/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-phillygpt/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Development Environment","href":"/project-phillygpt/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Sequence Diagrams for Use Cases","href":"/project-phillygpt/docs/system-architecture/sequence-diagrams","docId":"system-architecture/sequence-diagrams","unlisted":false},{"type":"link","label":"Version Control","href":"/project-phillygpt/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false},{"type":"link","label":"Database Diagrams","href":"/project-phillygpt/docs/system-architecture/database-diagram","docId":"system-architecture/database-diagram","unlisted":false},{"type":"link","label":"Backend Class Diagram","href":"/project-phillygpt/docs/system-architecture/backend-class-diagram","docId":"system-architecture/backend-class-diagram","unlisted":false},{"type":"link","label":"Frontend Class Diagram","href":"/project-phillygpt/docs/system-architecture/frontend-class-diagram","docId":"system-architecture/frontend-class-diagram","unlisted":false}],"href":"/project-phillygpt/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Backend API Useage","href":"/project-phillygpt/docs/api-specification/API Class Documentation","docId":"api-specification/API Class Documentation","unlisted":false},{"type":"link","label":"Frontend API Usage","href":"/project-phillygpt/docs/api-specification/Front End API","docId":"api-specification/Front End API","unlisted":false}],"href":"/project-phillygpt/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Integration Tests","href":"/project-phillygpt/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance Tests","href":"/project-phillygpt/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false},{"type":"link","label":"Unit Tests","href":"/project-phillygpt/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false}],"href":"/project-phillygpt/docs/category/test-procedures"}]},"docs":{"api-specification/API Class Documentation":{"id":"api-specification/API Class Documentation","title":"Backend API Useage","description":"Here are the API\'s we created and implemented for use in our backend.","sidebar":"docsSidebar"},"api-specification/Front End API":{"id":"api-specification/Front End API","title":"Frontend API Usage","description":"This page provides detailed information on how APIs are integrated and utilized in the React frontend of the application, focusing on both external API services and internal context APIs.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"- Access to the Internet","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"Figure 1. High level design of PhillyGPT application.","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use Cases","description":"Use Case 1 - Citizens in Philadelphia Vaccinated by Age","sidebar":"docsSidebar"},"system-architecture/backend-class-diagram":{"id":"system-architecture/backend-class-diagram","title":"Backend Class Diagram","description":"Backend Diagram","sidebar":"docsSidebar"},"system-architecture/database-diagram":{"id":"system-architecture/database-diagram","title":"Database Diagrams","description":"Above is the diagram for the MySQL database hosted using AWS Relational Database Service (RDS). This database has several tables that are accessed using SQL queries created from OpenAI\'s GPT 3.5 API.","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"Programming Languages","sidebar":"docsSidebar"},"system-architecture/frontend-class-diagram":{"id":"system-architecture/frontend-class-diagram","title":"Frontend Class Diagram","description":"Frontend Diagram","sidebar":"docsSidebar"},"system-architecture/sequence-diagrams":{"id":"system-architecture/sequence-diagrams","title":"Sequence Diagrams for Use Cases","description":"Use Case 1 - Citizens in Philadelphia Vaccinated by Age","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"For version control our team will utilize Git with our main repository hosted on GitHub. Our team follows a feature-branching workflow, where new features or fixes are developed in separate branches off the main branch. This allows for focused development and easier code reviews.","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance Tests","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration Tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit Tests","description":"Tests are automated by GitHub Actions on every pull request to the main branch.","sidebar":"docsSidebar"}}}')}}]);